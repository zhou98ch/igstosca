tosca_definitions_version: tosca_simple_yaml_1_3
imports:      
  - ../../igs.nodes.docker/IGSDockerApplication/NodeType.tosca
  - ../../../capabilitytypes/igs.capabilities.container/Repository/CapabilityType.tosca
  - ../../igs.nodes.Component/IGSRepository/NodeType.tosca
node_types:
  Alfresco.nodes.DockerContainer.ContentRepository:
    derived_from: igs.nodes.docker.DockerApplication
################secret version####################
                  # -Ddb.driver="{{ DDB_DRIVER }}"
                  # -Ddb.username="{{ DDB_USERNAME }}"
                  # -Ddb.password="{{ DDB_PASSWORD }}"
                  # -Ddb.url="{{ DDB_URL }}"
                  # -Dsolr.host="{{ SOLR_HOST_NAME }}"
                  # -Dsolr.port="{{ SOLR_PORT }}"
                  # -Dsolr.http.connection.timeout="{{ SOLR_PORT }}"
                  # -Dsolr.secureComms="{{ SOLR_SECURE_COMMS }}"
                  # -Dsolr.sharedSecret="{{ SOLR_SHARED_SECRET }}"
                  # -Dsolr.base.url="{{ SOLR_BASE_URL }}"
                  # -Dindex.subsystem.name="{{ INDEX_SUBSYSTEM_NAME }}"
                  # -Dshare.host="{{ SHARE_HOST }}"
                  # -Dshare.port="{{ SHARE_PORT }}"
                  # -Dalfresco.host="{{ ALFRESCO_HOST }}"
                  # -Dalfresco.port="{{ ALFRESCO_PORT }}"
                  # -Dcsrf.filter.enabled="{{ CSRF_FILTER_ENABLED }}"
                  # -Daos.baseUrlOverwrite="{{ BASE_URL_OVERWRITE }}"
                  # -Dmessaging.broker.url="{{ MESSAGING_BROKER_URL }}"
                  # -Ddeployment.method="{{ DEPLOYMENT_METHOD }}"
                  # -DlocalTransform.core-aio.url="{{ TRANSFORM_URL }}"
                  # -XX:MinRAMPercentage=50
                  # -XX:MaxRAMPercentage=80
##########none version##############
                  # -Ddb.driver="{{ DDB_DRIVER }}"
                  # -Ddb.username="{{ DDB_USERNAME }}"
                  # -Ddb.password="{{ DDB_PASSWORD }}"
                  # -Ddb.url="{{ DDB_URL }}"
                  # -Dsolr.host="{{ SOLR_HOST_NAME }}"
                  # -Dsolr.port="{{ SOLR_PORT }}"                 
                  # -Dsolr.secureComms=none
                  # -Dsolr.base.url="{{ SOLR_BASE_URL }}"
                  # -Dindex.subsystem.name="{{ INDEX_SUBSYSTEM_NAME }}"
                  # -Dshare.host="{{ SHARE_HOST }}"
                  # -Dshare.port="{{ SHARE_PORT }}"
                  # -Dalfresco.host="{{ ALFRESCO_HOST }}"
                  # -Dalfresco.port="{{ ALFRESCO_PORT }}"
                  # -Dcsrf.filter.enabled="{{ CSRF_FILTER_ENABLED }}"
                  # -Daos.baseUrlOverwrite="{{ BASE_URL_OVERWRITE }}"
                  # -Dmessaging.broker.url="{{ MESSAGING_BROKER_URL }}"
                  # -Ddeployment.method="{{ DEPLOYMENT_METHOD }}"
                  # -DlocalTransform.core-aio.url="{{ TRANSFORM_URL }}"
                  # -XX:MinRAMPercentage=50
                  # -XX:MaxRAMPercentage=80
    properties:
      mem_limit: 
        type:  scalar-unit.size
        default: 1900m
        constraints:
          - less_or_equal: 1900m
      db_driver:
        type: string
        default: org.postgresql.Driver
      db_username:
        type: string
        default: alfresco
      db_password:
        type: string
        default: alfresco
      db_url:
        type: string
        default: jdbc:postgresql://postgres:5432/alfresco
      
 
      solr_host: 
        type: string
        default: solr6
      solr_port:
        type: string
        default: 8983
      solr_http_connect_timeout:
        type: string
        default: 1000
      # HTTPS or SECRET
      alfresco_secure_comms:
        type: string
        default: secret
        constraints:
          - valid_values: [ secret, https ]
      # SHARED SECRET VALUE
      solr_shared_secret:
        type: string
        default: secret
      solr_base_url:
        type: string
        default: /solr
      index_subsystem_name:
        type: string
        default: solr6
      
      share_host:
        type: string
        default: localhost
        # http://share 127.0.0.1
      share_port:
        type: string
        default: 8080
      
      alfresco_host:
        type: string
        default: localhost
      alfresco_port:
        type: string
        default: 8080

      csrf_filter_enabled:
        type: string
        default: false
      base_url_overwrite:
        type: string
        default: http://localhost:8080/alfresco/aos
      messaging_broker_url:
        type: string
        default: "failover:(nio://activemq:61616)?timeout=3000&jms.useCompression=true"
      deployment_method:
        type: string
        default: DOCKER_COMPOSE
      transform_url:
        type: string
        default: http://transform-core-aio:8090/
      min_ram:
        type: string
        default: 50
      max_ram:
        type: string
        default: 80
      
      encryption_keystore_type:
        type: string
        default: JCEKS
      encryption_cipher_alg:
        type: string
        default: DESede/CBC/PKCS5Padding
      encryption_key_alg:
        type: string
        default: DESede
      encryption_keystore_location:
        type: string
        default: /usr/local/tomcat/shared/classes/alfresco/extension/keystore/keystore
      metadata_keystore_password:
        type: string
        default: mp6yc0UD9e
      metadata_keystore_aliases:
        type: string
        default: metadata
      metadata_password:
        type: string
        default: oKIWzVdEdA
      metadata_algorithm:
        type: string
        default: DESede

      # client_mnt_dir:
      #   type: string
      #   default: /mount/nfs
      # volume_dir:
      #   type: string
      #   default: /alfdata-volume
      container_data_dir:
        type: string
        required: false
        default: /usr/local/tomcat/alf_data

    capabilities: 
      containerApplication:
        valid_source_types: [ igs.nodes.Component.Repository ]
        type: igs.capabilities.container.Repository


    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create: 
            inputs:      
              CLIENT_MNT_DIR:
                type: string
                required: true
                default: { get_property: [ SELF, client_mnt_path ] } 
              VOLUME_DIR:
                type: string
                required: true
                default: { get_property: [ SELF, volume_dir ] }
              CONTAINER_DATA_DIR:
                type: string
                required: true
                default: { get_property: [ SELF, container_data_dir ] }

              ENCRYPTION_KEYSTORE_TYPE:
                type: string
                required: true
                default: { get_property: [ SELF, encryption_keystore_type ] } 
              ENCRYPTION_CIPHER_ALG:
                type: string
                required: true
                default: { get_property: [ SELF, encryption_cipher_alg ] }      
              ENCRYPTION_KEY_ALG:
                type: string
                required: true
                default: { get_property: [ SELF, encryption_key_alg ] }  
              ENCRYPTION_KEYSTORE_LOCATION:
                type: string
                required: true
                default: { get_property: [ SELF, encryption_keystore_location ] }      
              METADATA_KEYSTORE_PASSWORD:
                type: string
                required: true
                default: { get_property: [ SELF, metadata_keystore_password ] }          
              METADATA_KEYSTORE_ALIASES:
                type: string
                required: true
                default: { get_property: [ SELF, metadata_keystore_aliases ] }   
              METADATA_PASSWORD:
                type: string
                required: true
                default: { get_property: [ SELF, metadata_password ] }  
              METADATA_ALGORITHM:
                type: string
                required: true
                default: { get_property: [ SELF, metadata_algorithm ] }                                        
              MEM_LIMIT:
                type: string
                required: true
                default: { get_property: [ SELF, mem_limit ] }
              DDB_DRIVER: #org.postgresql.Driver
                type: string
                required: true
                default: { get_property: [ SELF, db_driver ] } #TARGET is supposed to be a database type

              DDB_USERNAME: #alfresco
                type: string
                required: true
                default: { get_property: [ SELF, db_username ] }
              
              DDB_PASSWORD: #alfresco
                type: string
                required: true
                default: { get_property: [ SELF, db_password] }

              DDB_URL: #alfresco
                type: string
                required: true
                default: { get_property: [ SELF, db_url] }

              SOLR_HOST_NAME: 
                type: string
                required: true
                default: { get_property: [ SELF, solr_host] } 
              SOLR_PORT: 
                type: string
                required: true
                default: { get_property: [ SELF, solr_port] } 
              SOLR_HTTP_CONNECT_TIMEOUT:
                type: string
                required: true
                default: { get_property: [ SELF, solr_http_connect_timeout] } 
              SOLR_SECURE_COMMS:
                type: string
                required: true
                default: { get_property: [ SELF, alfresco_secure_comms] } 
              SOLR_SHARED_SECRET:
                type: string
                required: true
                default: { get_property: [ SELF, solr_shared_secret] } 
              SOLR_BASE_URL:
                type: string
                required: true
                default: { get_property: [ SELF, solr_base_url] } 
              INDEX_SUBSYSTEM_NAME:
                type: string
                required: true
                default: { get_property: [ SELF, index_subsystem_name] } 
              SHARE_HOST:
                type: string
                required: true
                default: { get_property: [ SELF, share_host] } 
              SHARE_PORT:
                type: string
                required: true
                default: { get_property: [ SELF, share_port] } 
              ALFRESCO_HOST:
                type: string
                required: true
                default: { get_property: [ SELF, alfresco_host] } 
              ALFRESCO_PORT:
                type: string
                required: true
                default: { get_property: [ SELF, alfresco_port] } 
              CSRF_FILTER_ENABLED:
                type: string
                required: true
                default: { get_property: [ SELF, csrf_filter_enabled ] }    
              BASE_URL_OVERWRITE:
                type: string
                required: true
                default: { get_property: [ SELF, base_url_overwrite ] }     
              MESSAGING_BROKER_URL:
                type: string
                required: true
                default: { get_property: [ SELF, messaging_broker_url ] }    
              DEPLOYMENT_METHOD:
                type: string
                required: true
                default: { get_property: [ SELF, deployment_method ] }           
              TRANSFORM_URL:
                type: string
                required: true
                default: { get_property: [ SELF, transform_url ] }   
              MIN_RAM:
                type: string
                required: true
                default: { get_property: [ SELF, min_ram ] }   
              MAX_RAM:
                type: string
                required: true
                default: { get_property: [ SELF, max_ram ] }    
                
              ANSIBLE_HOST_IP:
                type: string
                required: true
                default: { get_attribute: [SELF, host, ansible_host_ip ] }
              ANSIBLE_USER:
                type: string
                required: true
                default: { get_attribute: [SELF, host, ansible_user ] }
              ANSIBLE_HOST_NAME:
                type: string
                required: true
                default: { get_attribute: [SELF, host, ansible_host_name ] } 
              HOST_TIER:
                type: string
                required: true
                default: { get_attribute: [SELF, host, tier ] }
              CONTAINER_GROUP:
                type: string
                required: true
                default: { get_property: [ SELF, group] }       
              LABELS:
                type: string
                required: true
                default: { get_property: [ SELF, labels] }
            implementation:
              primary: playbooks/create-govern-stack.yaml 

          



    # requirements:

    #   - host:
    #       capability: tosca.capabilities.Compute

    #       relationship: tosca.relationships.HostedOn
      # - dependency_1:
      #     capability: tosca.capabilities.Compute

      #     relationship: tosca.relationships.HostedOn
      # - dependency_2:
      #     capability: tosca.capabilities.Compute

      #     relationship: tosca.relationships.HostedOn
      # - dependency_3:
      #     capability: tosca.capabilities.Compute

      #     relationship: tosca.relationships.HostedOn
      # - dependency_4:
      #     capability: tosca.capabilities.Compute

      #     relationship: tosca.relationships.HostedOn
      # - dependency_5:
      #     capability: tosca.capabilities.Compute

      #     relationship: tosca.relationships.HostedOn
